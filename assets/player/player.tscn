[gd_scene load_steps=25 format=4 uid="uid://dhskpyhdo2ssn"]

[ext_resource type="AnimationNodeBlendTree" uid="uid://dy7qx6vcfxkfv" path="res://assets/player/player_animation three.tres" id="2_4nf63"]
[ext_resource type="Animation" uid="uid://coqwbdy3avbpg" path="res://assets/player/bump shotgum.res" id="2_kpelj"]
[ext_resource type="Animation" uid="uid://bsjhoq6khqfcw" path="res://assets/player/idle.res" id="3_qb0gm"]
[ext_resource type="Animation" uid="uid://de8ct1ipm4hg6" path="res://assets/player/grab gun.res" id="3_yv4h1"]
[ext_resource type="Texture2D" uid="uid://cjdo8j5sq15g2" path="res://assets/player/croshair.png" id="4_1scay"]
[ext_resource type="Animation" uid="uid://dwrfvtudjfymc" path="res://assets/player/jump.res" id="4_pdjqt"]
[ext_resource type="Animation" uid="uid://ekkhcjx26vur" path="res://assets/player/idle gum.res" id="4_wyo0o"]
[ext_resource type="Animation" uid="uid://cllx0c6cvqga4" path="res://assets/player/look_gun.res" id="5_aygot"]
[ext_resource type="Animation" uid="uid://o3akupw87l7v" path="res://assets/player/strong shoot.res" id="5_o25uh"]
[ext_resource type="Animation" uid="uid://bp3bf52dwph40" path="res://assets/player/shoot.res" id="6_yvh1d"]
[ext_resource type="Animation" uid="uid://cvxsbuchoe1g7" path="res://assets/player/walk.res" id="7_i0576"]

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_57xbc"]
friction = 0.0
rough = true

[sub_resource type="GDScript" id="GDScript_l7khq"]
script/source = "extends BasicMovement

@export var max_health := 100
@export var health := 100

@export var guns : Array[PackedScene] 
var current_gun : Node3D

@export var max_armor := 50
@export var armor := 50

var damage_vision_polution := 0.0
var damage_vision_power := 0.1
var damage_color : Color = Color.RED
func set_border_effect(power : float):
	var mat : Material = $visual_effects.get_material()
	mat[\"shader_parameter/color\"] = damage_color
	mat[\"shader_parameter/power\"] = power
	$visual_effects.set_material(mat)

func hit_damage(damage : int):
	if armor > 0:
		
		health -= damage / 2
		armor -= damage / 2
		damage_vision_polution = 0.5
		damage_color  = Color.RED
		
		if armor < 0:
			armor = 0
		
	else:
		health -= damage
		damage_vision_polution = 0.5
		damage_color  = Color.RED
	
	if health < 0:
		health = 0



var mouse_movement = Vector2.ZERO
func _input(event):
	if event is InputEventMouseMotion:
		mouse_movement = -event.relative * Global.mouse_sensitivity
	else:
		mouse_movement = Vector2.ZERO

var wepon_presentation : float = 0.0


func select_gun(no : int ) -> void:
	if current_gun != null:
		current_gun.queue_free()
		current_gun = null
	
	if guns.size() > no:
		current_gun = guns[no].instantiate()
		$\"SubViewportContainer/SubViewport/Camera3D/player_animations/Armature/Skeleton3D/example gun/gun_base\".add_child(current_gun)

var selected_gun_no := 0

func _ready() -> void:
	
	var color := Color.RED
	color.a = damage_vision_power
	set_border_effect(0)
	
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	
	Global.player = self
	Global.camera = $Camera3D
	
	$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/look/request\",AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
	
	select_gun(selected_gun_no)
	
	wepon_presentation = 3
	
	
	

@export var target : Vector3
func look_target():
	if $Camera3D/RayCast3D.is_colliding():
		target = $Camera3D/RayCast3D.get_collision_point()
	else:
		target = $Camera3D/RayCast3D.global_basis.z.normalized() * -1000
	target += target.normalized() * 0.2

func look_around(delta) -> void:
	
	look_target()
	rotation_degrees.y += ((mouse_movement.x * Global.mouse_sensitivity) + (Input.get_axis(\"look_right\",\"look_left\") * Global.joystick_sensitivity * 10)) * delta
	$Camera3D.rotation_degrees.x += ((mouse_movement.y * Global.mouse_sensitivity) + (Input.get_axis(\"look_down\",\"look_up\") * Global.joystick_sensitivity * 10)) * delta
	$Camera3D.rotation_degrees.x = max(-90,min(90,$Camera3D.rotation_degrees.x))
	
	$SubViewportContainer/SubViewport/Camera3D.global_transform = $Camera3D.global_transform
	if delta > 0:
		$Camera3D.rotation_degrees.z = Input.get_axis(\"left\",\"right\")
		
		var wepon_rotation_target = Vector2((Input.get_axis(\"look_right\",\"look_left\") * 10) + max(min(mouse_movement.x,1),-1) * 15,(Input.get_axis(\"look_down\",\"look_up\") * 10) + max(min(mouse_movement.y,1),-1) * 15)
		$SubViewportContainer/SubViewport/Camera3D/player_animations/Armature.rotation_degrees.y = lerp($SubViewportContainer/SubViewport/Camera3D/player_animations/Armature.rotation_degrees.y,wepon_rotation_target.x,2*delta)
		$SubViewportContainer/SubViewport/Camera3D/player_animations/Armature.rotation_degrees.x = lerp($SubViewportContainer/SubViewport/Camera3D/player_animations/Armature.rotation_degrees.x,wepon_rotation_target.y,2*delta)
		

func shot_animation():
	
	$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/look/request\",AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
	$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/shot/request\",AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
		

func bump_shot_animation():
	$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/strong shot bump/request\",AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)



func update_pause():
	if Input.is_action_just_pressed(\"pause\"):
		Global.pause()



func movement_plugin(delta) -> void:
	update_pause()
	
	if damage_vision_polution < 0:
		damage_vision_polution = 0
	
	set_border_effect(damage_vision_polution)
	
	damage_vision_polution -= delta
	
	
	wepon_presentation -= delta
	look_around(delta)
	
	move_direction = (basis.z.normalized() * Input.get_axis(\"foward\",\"back\")) + (basis.x.normalized() * Input.get_axis(\"left\",\"right\"))
	
	
	if abs(move_direction.x) + abs(move_direction.y) > 1:
		move_direction = move_direction.normalized()
	
	
	
	if in_floor:
		if Input.get_axis(\"foward\",\"back\") != 0 or Input.get_axis(\"left\",\"right\") != 0:
			$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/Transition/transition_request\",\"walk\")
		else:
			$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/Transition/transition_request\",\"idle\")
	else:
		$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/Transition/transition_request\",\"jump\")
	
	
	if Input.is_action_just_pressed(\"jump\") and in_floor:
		jump()
	
	if Input.is_action_just_pressed(\"fire\"):
		$SubViewportContainer/SubViewport/Camera3D/player_animations/AnimationTree.set(\"parameters/look/request\",AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
	
	if guns.size() > 0:
		if Input.is_action_just_pressed(\"next_wepon\"):
			selected_gun_no += 1
			if selected_gun_no >= guns.size():
				selected_gun_no = 0
			
			select_gun(selected_gun_no)
		
		if Input.is_action_just_pressed(\"previous_wepon\"):
			selected_gun_no -= 1
			if 0 > selected_gun_no:
				selected_gun_no = guns.size() - 1
			select_gun(selected_gun_no)
	
	


func _on_tree_exiting() -> void:
	Global.player = null
"

[sub_resource type="CylinderShape3D" id="CylinderShape3D_mmbuf"]
height = 0.5
radius = 0.4

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_sr4fy"]

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_655ry"]

[sub_resource type="Sky" id="Sky_h8ehh"]
sky_material = SubResource("PanoramaSkyMaterial_655ry")

[sub_resource type="Environment" id="Environment_pcnwn"]
background_mode = 1
sky = SubResource("Sky_h8ehh")
ambient_light_source = 2
ambient_light_color = Color(1, 1, 1, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_lod8h"]

[sub_resource type="ArrayMesh" id="ArrayMesh_qhhhk"]
_surfaces = [{
"aabb": AABB(-0.11, -0.2, -1.22, 0.22, 0.720402, 1.44),
"format": 34359742465,
"index_count": 108,
"index_data": PackedByteArray("AAADAAEAAAACAAMAAgAHAAMAAgAGAAcABgAFAAcABgAEAAUABAABAAUABAAAAAEAAgAEAAYAAgAAAAQAAQALAAUAAQAIAAsACwAOAAoACwAPAA4ABwAJAAMABwAKAAkABQAKAAcABQALAAoAAwAIAAEAAwAJAAgADgAMAA0ADgAPAAwACQAMAAgACQANAAwACAAPAAsACAAMAA8ACQASAA0ACQAQABIAEQASABAAEQATABIADQATAA4ADQASABMACgAQAAkACgARABAADgARAAoADgATABEA"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 20,
"vertex_data": PackedByteArray("zMzMvczMTL7MzEw+zMzMvczMTD7MzEw+zMzMvczMTL7MzEy+zMzMvczMTD7MzEy+zMzMPczMTL7MzEw+zMzMPczMTD7MzEw+zMzMPczMTL7MzEy+zMzMPczMTD7MzEy+rkfhvczMTD6uR2E+rkfhvczMTD6uR2G+rkfhPczMTD6uR2G+rkfhPczMTD6uR2E+rkfhvQw5BT+uR2E+rkfhvQw5BT+uR2G+rkfhPQw5BT+uR2G+rkfhPQw5BT+uR2E+rkfhvczMTD72KJy/rkfhPczMTD72KJy/rkfhvQw5BT/2KJy/rkfhPQw5BT/2KJy/")
}]
blend_shape_mode = 0

[sub_resource type="ArrayMesh" id="ArrayMesh_sl6xk"]
resource_name = "player_animations_example gun"
_surfaces = [{
"aabb": AABB(-0.11, -0.2, -1.22, 0.22, 0.720402, 1.44),
"attribute_data": PackedByteArray("AADAPgAAAAAAAAA+AACAPgAAwD4AAIA/AAAgPwAAAAAAACA/AAAAAAAAID8AAIA/AAAgPwAAgD8AAMA+AABAPwAAAD4AAAA/AADAPgAAQD8AACA/AABAPwAAID8AAEA/AAAgPwAAQD8AAMA+AACAPgAAwD4AAIA+AADAPgAAgD4AACA/AACAPgAAID8AAIA+AAAgPwAAgD4AAMA+AAAAPwAAwD4AAAA/AADAPgAAAD8AACA/AAAAPwAAID8AAAA/AAAgPwAAAD8AACA/AAAAAAAAID8AAAAAAAAgPwAAgD8AACA/AACAPwAAID8AAEA/AAAgPwAAQD8AACA/AAAAPwAAID8AAAA/AAAgPwAAgD4AACA/AACAPgAAID8AAIA+AAAgPwAAAAAAAGA/AACAPgAAID8AAIA/AABgPwAAAD8AACA/AABAPwAAID8AAAA/AAAgPwAAAD8AACA/AACAPgAAID8AAIA+AAAgPwAAgD4AACA/AABAPwAAID8AAEA/AAAgPwAAQD8AACA/AAAAPwAAID8AAAA/AAAgPwAAAD8AACA/AABAPwAAYD8AAAA/AAAgPwAAQD8AACA/AAAAPwAAID8AAAA/AAAgPwAAAD8="),
"format": 34359742487,
"index_count": 108,
"index_data": PackedByteArray("AgAMAAYAAgAJAAwABwAWAAoABwATABYAFQASABgAFQAPABIADQADABAADQAAAAMACAAOABQACAABAA4ABAAiABEABAAaACIAIwAqACAAIwAtACoAFwAdAAsAFwAfAB0AEQAfABcAEQAiAB8ACwAbAAUACwAdABsAKQAlACcAKQAsACUAHgAmABwAHgAoACYAGQArACEAGQAkACsAHgA2ACgAHgAwADYAMQA0AC4AMQA3ADQAJwA4ACkAJwA1ADgAHwAvAB0AHwAyAC8AKgAzACAAKgA5ADMA"),
"material": SubResource("StandardMaterial3D_lod8h"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 58,
"vertex_data": PackedByteArray("zMzMvczMTL7MzEw+zMzMvczMTL7MzEw+zMzMvczMTL7MzEw+zMzMvczMTD7MzEw+zMzMvczMTD7MzEw+zMzMvczMTD7MzEw+zMzMvczMTD7MzEw+zMzMvczMTL7MzEy+zMzMvczMTL7MzEy+zMzMvczMTL7MzEy+zMzMvczMTD7MzEy+zMzMvczMTD7MzEy+zMzMvczMTD7MzEy+zMzMPczMTL7MzEw+zMzMPczMTL7MzEw+zMzMPczMTL7MzEw+zMzMPczMTD7MzEw+zMzMPczMTD7MzEw+zMzMPczMTD7MzEw+zMzMPczMTL7MzEy+zMzMPczMTL7MzEy+zMzMPczMTL7MzEy+zMzMPczMTD7MzEy+zMzMPczMTD7MzEy+zMzMPczMTD7MzEy+rkfhvczMTD6uR2E+rkfhvczMTD6uR2E+rkfhvczMTD6uR2E+rkfhvczMTD6uR2E+rkfhvczMTD6uR2G+rkfhvczMTD6uR2G+rkfhPczMTD6uR2G+rkfhPczMTD6uR2G+rkfhPczMTD6uR2E+rkfhPczMTD6uR2E+rkfhPczMTD6uR2E+rkfhvQw5BT+uR2E+rkfhvQw5BT+uR2E+rkfhvQw5BT+uR2E+rkfhvQw5BT+uR2G+rkfhvQw5BT+uR2G+rkfhPQw5BT+uR2G+rkfhPQw5BT+uR2G+rkfhPQw5BT+uR2E+rkfhPQw5BT+uR2E+rkfhPQw5BT+uR2E+rkfhvczMTD72KJy/rkfhvczMTD72KJy/rkfhvczMTD72KJy/rkfhPczMTD72KJy/rkfhPczMTD72KJy/rkfhPczMTD72KJy/rkfhvQw5BT/2KJy/rkfhvQw5BT/2KJy/rkfhvQw5BT/2KJy/rkfhPQw5BT/2KJy/rkfhPQw5BT/2KJy/rkfhPQw5BT/2KJy//3//f/9/////fwAA////vwAA/3//f////3//f/9/////fwAA////v/9/AAD///+/AAD/f/9//////////3////9/AAD///+/AAD/f/9//////////3////9/AAD///+/AAD/f/9/////f/9//3////9/AAD///+/////f/9/////f/9//3////9/AAD///+/////f/9//////////3////9/AAD///+/////f/9//////////3////9/AAD///+/////f/9/////f/9/////P/9/AAD///+//38AAP///78AAP9/////v/9/AAD///+/AAD/f////7//fwAA////v////3////+//3//f////z//fwAA////v////3////+//3//f////z//f///AAD/vwAA/3////+//3///wAA/78AAP9/////v/9///8AAP+/////f////7//f/9/////P/9///8AAP+/////f////7//////////v/9/AAD///+/AAD/f////7//////////v/9/AAD///+/////f////7//////////v/9///////+/AAD/f////7//////////v/9///////+/////f////78=")
}]
blend_shape_mode = 0
shadow_mesh = SubResource("ArrayMesh_qhhhk")

[sub_resource type="AnimationLibrary" id="AnimationLibrary_h4dky"]
_data = {
"bump shotgum": ExtResource("2_kpelj"),
"grab gun": ExtResource("3_yv4h1"),
"idle": ExtResource("3_qb0gm"),
"idle gum": ExtResource("4_wyo0o"),
"jump": ExtResource("4_pdjqt"),
"look_gun": ExtResource("5_aygot"),
"shoot": ExtResource("6_yvh1d"),
"strong shoot": ExtResource("5_o25uh"),
"walk": ExtResource("7_i0576")
}

[sub_resource type="Shader" id="Shader_ek16j"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's CanvasItemMaterial.

shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

uniform float power = 1;

uniform vec4 color : source_color = vec4(1.0,0.0,0.0,1.0);
const vec2 CENTER = vec2(0.5,0.5);

void fragment() {
	COLOR = mix(texture(screen_texture,SCREEN_UV),color,distance(CENTER,SCREEN_UV) * power);


}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_x2nxm"]
resource_local_to_scene = true
shader = SubResource("Shader_ek16j")
shader_parameter/power = 1.0
shader_parameter/color = Color(1, 0, 0, 1)

[node name="player" type="RigidBody3D"]
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true
physics_material_override = SubResource("PhysicsMaterial_57xbc")
contact_monitor = true
max_contacts_reported = 5
script = SubResource("GDScript_l7khq")
speed = 12.0
jump_power = 7

[node name="floorChekerRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.485707, 0)

[node name="floorChekerShape" type="ShapeCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.785732, 0)
shape = SubResource("CylinderShape3D_mmbuf")
target_position = Vector3(0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.71066, 0)
cull_mask = 1
fov = 90.0

[node name="AudioListener3D" type="AudioListener3D" parent="Camera3D"]

[node name="RayCast3D" type="RayCast3D" parent="Camera3D"]
target_position = Vector3(0, 0, -2.5)

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_sr4fy")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_pcnwn")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1152, 648)
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.712216, 0)
cull_mask = 2
fov = 90.0

[node name="player_animations" type="Node3D" parent="SubViewportContainer/SubViewport/Camera3D"]
transform = Transform3D(0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0)

[node name="Armature" type="Node3D" parent="SubViewportContainer/SubViewport/Camera3D/player_animations"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1, -1, -2)

[node name="Skeleton3D" type="Skeleton3D" parent="SubViewportContainer/SubViewport/Camera3D/player_animations/Armature"]
bones/0/name = "Bone"
bones/0/parent = -1
bones/0/rest = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.337554, 0.414343)
bones/0/enabled = true
bones/0/position = Vector3(1.49012e-08, 0.412735, 0.414342)
bones/0/rotation = Quaternion(0, 0, 0, 1)
bones/0/scale = Vector3(1, 1, 1)
bones/1/name = "Bone.002"
bones/1/parent = 0
bones/1/rest = Transform3D(1, 0, 0, 0, 0, 1, 0, -1, 0, 0.0147692, 4.76837e-07, -0.321514)
bones/1/enabled = true
bones/1/position = Vector3(0.0147692, 4.76837e-07, -0.321514)
bones/1/rotation = Quaternion(-0.707107, 0, 0, 0.707107)
bones/1/scale = Vector3(1, 1, 1)
bones/2/name = "example gun"
bones/2/parent = 1
bones/2/rest = Transform3D(1, 0, 0, 0, 0, -1, 0, 1, 0, -0.0147692, 0.0928288, -0.337555)
bones/2/enabled = true
bones/2/position = Vector3(-0.0147692, 0.0928288, -0.337555)
bones/2/rotation = Quaternion(0.707107, 0, 0, 0.707107)
bones/2/scale = Vector3(1, 1, 1)

[node name="example gun" type="BoneAttachment3D" parent="SubViewportContainer/SubViewport/Camera3D/player_animations/Armature/Skeleton3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.65661e-08, 0.0751804, -3.50177e-07)
bone_name = "example gun"
bone_idx = 2

[node name="example gun" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Camera3D/player_animations/Armature/Skeleton3D/example gun"]
visible = false
mesh = SubResource("ArrayMesh_sl6xk")
skeleton = NodePath("")

[node name="gun_base" type="Node3D" parent="SubViewportContainer/SubViewport/Camera3D/player_animations/Armature/Skeleton3D/example gun"]

[node name="AnimationTree" type="AnimationTree" parent="SubViewportContainer/SubViewport/Camera3D/player_animations"]
tree_root = ExtResource("2_4nf63")
anim_player = NodePath("../AnimationPlayer")
parameters/Add2/add_amount = 1.0
parameters/Transition/current_state = "idle"
parameters/Transition/transition_request = ""
parameters/Transition/current_index = 0
parameters/bump/active = false
parameters/bump/internal_active = false
parameters/bump/request = 0
"parameters/idle gun/active" = false
"parameters/idle gun/internal_active" = false
"parameters/idle gun/request" = 0
parameters/look/active = false
parameters/look/internal_active = false
parameters/look/request = 0
parameters/shot/active = false
parameters/shot/internal_active = false
parameters/shot/request = 0
"parameters/shot bump/active" = false
"parameters/shot bump/internal_active" = false
"parameters/shot bump/request" = 0
"parameters/strong shot/active" = false
"parameters/strong shot/internal_active" = false
"parameters/strong shot/request" = 0
"parameters/strong shot bump/active" = false
"parameters/strong shot bump/internal_active" = false
"parameters/strong shot bump/request" = 0

[node name="AnimationPlayer" type="AnimationPlayer" parent="SubViewportContainer/SubViewport/Camera3D/player_animations"]
root_node = NodePath("")
libraries = {
"": SubResource("AnimationLibrary_h4dky")
}

[node name="croshair" type="TextureRect" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -32.5
offset_top = -32.5
offset_right = 32.5
offset_bottom = 32.5
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 4
texture = ExtResource("4_1scay")

[node name="visual_effects" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_x2nxm")
offset_right = 1152.0
offset_bottom = 648.0

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="tree_exiting" from="." to="." method="_on_tree_exiting"]
